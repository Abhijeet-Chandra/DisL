$date
	Mon Sep 01 00:38:04 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module MUX16to1_Q4_tb $end
$var wire 1 ! f $end
$var reg 4 " s [3:0] $end
$var reg 16 # w [0:15] $end
$scope module MUX16to1_Q4_instance $end
$var wire 4 $ s [3:0] $end
$var wire 16 % w [0:15] $end
$var wire 1 ! f $end
$var wire 2 & c [0:1] $end
$scope module stage1a $end
$var wire 3 ' s [2:0] $end
$var wire 8 ( w [0:7] $end
$var reg 1 ) f $end
$upscope $end
$scope module stage1b $end
$var wire 3 * s [2:0] $end
$var wire 8 + w [0:7] $end
$var reg 1 , f $end
$upscope $end
$scope module stage2 $end
$var wire 1 - s0 $end
$var wire 2 . w [0:1] $end
$var reg 1 ! f $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 / i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 0 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 0
b0 /
b11 .
0-
1,
b11110001 +
b0 *
1)
b10101100 (
b0 '
b11 &
b1010110011110001 %
b0 $
b1010110011110001 #
b0 "
1!
$end
#10
0!
b1 &
b1 .
0)
b1 '
b1 *
b1 "
b1 $
b1 /
#20
1!
b11 &
b11 .
1)
b10 '
b10 *
b10 "
b10 $
b10 /
#30
0!
b1 &
b1 .
0)
b11 '
b11 *
b11 "
b11 $
b11 /
#40
1!
1)
b10 &
b10 .
0,
b100 '
b100 *
b100 "
b100 $
b100 /
#50
b101 '
b101 *
b101 "
b101 $
b101 /
#60
0!
b0 &
b0 .
0)
b110 '
b110 *
b110 "
b110 $
b110 /
#70
b1 &
b1 .
1,
b111 '
b111 *
b111 "
b111 $
b111 /
#80
b11 &
b11 .
1)
1!
b0 '
b0 *
1-
b1000 "
b1000 $
b1000 /
#90
b1 &
b1 .
0)
b1 '
b1 *
b1001 "
b1001 $
b1001 /
#100
b11 &
b11 .
1)
b10 '
b10 *
b1010 "
b1010 $
b1010 /
#110
b1 &
b1 .
0)
b11 '
b11 *
b1011 "
b1011 $
b1011 /
#120
0!
1)
b10 &
b10 .
0,
b100 '
b100 *
b1100 "
b1100 $
b1100 /
#130
b101 '
b101 *
b1101 "
b1101 $
b1101 /
#140
b0 &
b0 .
0)
b110 '
b110 *
b1110 "
b1110 $
b1110 /
#150
1!
b1 &
b1 .
1,
b111 '
b111 *
b1111 "
b1111 $
b1111 /
#160
b11 &
b11 .
1)
b0 '
b0 *
0-
b11001011 (
b11100011 +
b0 "
b0 $
b1100101111100011 #
b1100101111100011 %
b0 0
b10000 /
#170
b1 '
b1 *
b1 "
b1 $
b1 0
#180
0!
b1 &
b1 .
0)
b10 '
b10 *
b10 "
b10 $
b10 0
#190
b0 &
b0 .
0,
b11 '
b11 *
b11 "
b11 $
b11 0
#200
1!
b10 &
b10 .
1)
b100 '
b100 *
b100 "
b100 $
b100 0
#210
0!
b0 &
b0 .
0)
b101 '
b101 *
b101 "
b101 $
b101 0
#220
1!
1)
b11 &
b11 .
1,
b110 '
b110 *
b110 "
b110 $
b110 0
#230
b111 '
b111 *
b111 "
b111 $
b111 0
#240
b0 '
b0 *
1-
b1000 "
b1000 $
b1000 0
#250
b1 '
b1 *
b1001 "
b1001 $
b1001 0
#260
b1 &
b1 .
0)
b10 '
b10 *
b1010 "
b1010 $
b1010 0
#270
0!
b0 &
b0 .
0,
b11 '
b11 *
b1011 "
b1011 $
b1011 0
#280
b10 &
b10 .
1)
b100 '
b100 *
b1100 "
b1100 $
b1100 0
#290
b0 &
b0 .
0)
b101 '
b101 *
b1101 "
b1101 $
b1101 0
#300
1!
1)
b11 &
b11 .
1,
b110 '
b110 *
b1110 "
b1110 $
b1110 0
#310
b111 '
b111 *
b1111 "
b1111 $
b1111 0
#320
b10000 0
